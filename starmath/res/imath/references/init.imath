%%***************************************************************************
%%                         	init.imath - basic mathematics init
%%                             -------------------
%%    begin                : Fri Oct 29 2008
%%    copyright            : (C) 2022 by Jan Rheinlaender
%%    email                : jrheinlaender@users.sourceforge.net
%% ***************************************************************************/
%%
%%***************************************************************************
%% *                                                                         *
%% *   This program is free software; you can redistribute it and/or modify  *
%% *   it under the terms of the GNU General Public License as published by  *
%% *   the Free Software Foundation; either version 2 of the License, or     *
%% *   (at your option) any later version.                                   *
%% *                                                                         *
%% ***************************************************************************/
%%
%%%-------------- Mathematical functions ----------------------------------------
%%ii function{ {lib;expand;defdiff}, square, x_{.x.}}
%%ii @lib:__square__@ funcdef* square(x_{.x.}) = x_{.x.}^2
%%ii function{ {lib;defdiff;trig}, cot, x_{.x.}}
%%ii @lib:__cot__@ funcdef* cot(x_{.x.}) = 1 / tan(x_{.x.})
%%ii function{ {lib;defdiff;trig}, coth, x_{.x.}}
%%ii @lib:__coth__@ funcdef* coth(x_{.x.}) = 1/tanh(x_{.x.})
%%ii function{ {lib;defdiff;trig}, sec, x_{.x.}}
%%ii @lib:__sec__@ funcdef* sec(x_{.x.}) = 1 / cos(x_{.x.})
%%ii function{ {lib;defdiff;trig}, arcsec, x_{.x.}}
%%ii @lib:__arcsec__@ funcdef* arcsec(x_{.x.}) = arccos(1/x_{.x.})
%%ii function{ {lib;defdiff;trig}, csc, x_{.x.}}
%%ii @lib:__csc__@ funcdef* csc(x_{.x.}) = 1 / sin(x_{.x.})
%%ii function{ {lib;defdiff;trig}, arccsc, x_{.x.}}
%%ii @lib:__arccsc__@ funcdef* arccsc(x_{.x.}) = arcsin(1/x_{.x.})
%%ii function{ {lib;defdiff}, log, x_{.x.}}
%%ii @lib:__log__@ funcdef* log(x_{.x.}) = ln(x_{.x.}) / ln(10)
%%ii function{ {lib;defdiff;nobracket;expand}, sqrt, x_{.x.}}
%%ii @lib:__sqrt__@ funcdef* sqrt(x_{.x.}) = x_{.x.}^{1/2}
%%ii function{ {lib;defdiff;trig}, arccot, x_{.x.}}
%%ii @lib:__arccot__@ funcdef* arccot(x_{.x.}) = %pi/2 - arctan(x_{.x.})
%%ii function{ {lib;defdiff;trig}, arcoth, x_{.x.}}
%%ii @lib:__arccoth__@ funcdef* arcoth(x_{.x.}) = 1/2 * ln((x_{.x.}+1) / (x_{.x.}-1))
%%ii function{ {lib;defdiff;trig}, sech, x_{.x.}}
%%ii @lib:__sech__@ funcdef* sech(x_{.x.}) = 1 / cosh(x_{.x.})
%%ii function{ {lib;defdiff;trig}, csch, x_{.x.}}   
%%ii @lib:__csch__@ funcdef* csch(x_{.x.}) = 1 / sinh(x_{.x.})
%%ii function{ {lib;defdiff;trig}, arsech, x_{.x.}}
%%ii @lib:__arsech__@ funcdef* arsech(x_{.x.}) = ln((1 + sqrt(1 - x_{.x.}^2)) / x_{.x.})
%%ii function{ {lib;defdiff;trig}, arcsch, x_{.x.}}
%%ii @lib:__arcsch__@ funcdef* arcsch(x_{.x.}) = ln((1 + sqrt(1 + x_{.x.}^2)) / x_{.x.})
%%ii function{ {lib}, max, x_{.x.}; y_{.y.}}
%%ii @lib:__max__@ funcdef* max(x_{.x.}; y_{.y.}) = ifelse(x_{.x.} < y_{.y.}; y_{.y.}; x_{.x.})
%%ii function{ {lib}, min, x_{.x.}; y_{.y.}}
%%ii @lib:__min__@ funcdef* min(x_{.x.}; y_{.y.}) = ifelse(x_{.x.} > y_{.y.}; y_{.y.}; x_{.x.})
%%ii function{ {lib}, interpol, w_{.w.};x_{.x.};y_{.y.};z_{.z.};t_{.t.}}
%%ii @lib:__interpol__@ funcdef* interpol(w_{.w.};x_{.x.};y_{.y.};z_{.z.};t_{.t.}) = x_{.x.} + (t_{.t.} - w_{.w.}) * (z_{.z.} - x_{.x.})/(y_{.y.} - w_{.w.})
